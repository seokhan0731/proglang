use std::str::FromStr ;
use crate::ast::{Expr,Opr} ;

grammar;

pub Expr: Box<Expr> = {
    "(" <l:Expr> <op:ExprOp> <r:Expr> ")" => Box::new(Expr::Op(l, op, r)),
    <n:Num> => Box::new(Expr::Num(n)),
    "val" <x:Id> "=" <e1:Expr> "in" <e2:Expr> => Box::new(Expr::Val(String::from(x), e1, e2)),
    <x:Id> => Box::new(Expr::Use(String::from(x))),
    "(" <e:Expr> ")" => e,
};

ExprOp: Opr = {
    "+" => Opr::Add,
    "-" => Opr::Sub,
};

Id: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => String::from(<>),
}

Num: i32 = {
    r"(-)?[0-9]+" => i32::from_str(<>).unwrap(),
}