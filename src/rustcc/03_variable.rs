//03_ 변수, 가변성, 쉐도잉의 중점
fn main () {
    let s : i32 ;
/*  러스트의 변수는 기본적으로 immutable이 default
값을 수정해야 된다면 how?->쉐도잉 or mut 키워드 사용
1. 쉐도잉: 변수를 그때 그때 사용해야될때마다 같은 방식으로 선언해서 사용->예전값을 가린다는 뜻에서 쉐도잉이라하는듯?
2. mut: 변수 선언할때나 주요 사용처에서 let mut 이름:type=값으로 선언

스코프와 표현식
스코프->생명주기와 코드 블럭 관련(지역, 전역 느낌이라 생각하면 된다)
러스트에서는 변수 정의에도 코드블럭 단위로 가능-> ;이 안 붙은게 rtn값->변수 생성시, 코드 블럭 내용이 실행되고
그 변수에는 ;안붙은 라인의 값이 들어간다. 변수 출력마다 해당 코드블럭의 코드가 실행되는 것이 아닌, 컴파일러가 그
변수를 처음에 읽는 과정에서만 실행된다.
 */
    let mut input = String::new() ;
    io::stdin().read_line(&mut input).expect("failed") ;
    s = input.trim().parse().expect("wrong") ;

    println!("s: {}", s) ;


    let s = 2 ; //변수 선언 default:i32
    println!("s: {}", s) ;
    
    
    {
        let s = 3 ;
        println!("s: {}", s) ;
    }
    //->코드 블럭별 ->안에 있는 코드는 해당 코드 블럭에서만 유효성을 가진다!(모든 프로그래밍언어)


    //코드 블럭으로 변수 초기화->변수가 처음 생성될 때만, println!실행되고, 이 변수 값을 사용한다면 v+s가 된다
    let r = {
        let v = 42 ;
        println!("v: {}", v) ;
        v + s
    } ;

    println!("r: {}", r) ;
    
}
